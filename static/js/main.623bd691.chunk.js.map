{"version":3,"sources":["TabSelector.js","App.js","serviceWorker.js","index.js"],"names":["TabSelector","className","id","onClick","this","props","handleChangeTab","activeId","Component","Home","About","Contact","Error","App","state","bind","event","buttonId","target","setState","getTabContent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAiCeA,E,uKA5BX,OACE,yBAAKC,UAAU,eACb,4BACEC,GAAG,OACHC,QAASC,KAAKC,MAAMC,gBACpBL,UAAmC,SAAxBG,KAAKC,MAAME,SAAsB,SAAW,IAHzD,QAOA,4BACEL,GAAG,QACHC,QAASC,KAAKC,MAAMC,gBACpBL,UAAmC,UAAxBG,KAAKC,MAAME,SAAuB,SAAW,IAH1D,SAOA,4BACEL,GAAG,UACHC,QAASC,KAAKC,MAAMC,gBACpBL,UAAmC,YAAxBG,KAAKC,MAAME,SAAyB,SAAW,IAH5D,gB,GAnBkBC,aCEpBC,G,MAAO,kBAAM,4DACbC,EAAQ,kBAAM,6DACdC,EAAU,kBAAM,wDAChBC,EAAQ,kBAAM,6CAAkB,yCAAlB,MA2CLC,E,kDAxCb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXP,SAAU,QAEZ,EAAKD,gBAAkB,EAAKA,gBAAgBS,KAArB,gBALN,E,4DASjB,OAAOX,KAAKU,MAAMP,UAChB,IAAK,OACH,OAAO,kBAAC,EAAD,MACT,IAAK,QACH,OAAO,kBAAC,EAAD,MACT,IAAK,UACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,kBAAC,EAAD,S,sCAIGS,GACd,IAAMC,EAAWD,EAAME,OAAOhB,GAC9BE,KAAKe,SAAS,CAAEZ,SAAUU,M,+BAI1B,OACE,yBAAKhB,UAAU,OACb,kBAAC,EAAD,CAAaM,SAAUH,KAAKU,MAAMP,SAAUD,gBAAiBF,KAAKE,kBAClE,yBAAKL,UAAU,eAEXG,KAAKgB,sB,GAjCCZ,aCGEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.623bd691.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TabSelector extends Component {\n\n  render() {\n    return (\n      <div className=\"TabSelector\">\n        <button\n          id=\"home\"\n          onClick={this.props.handleChangeTab}\n          className={this.props.activeId === 'home' ? 'active' : ''}\n        >\n          Home\n        </button>\n        <button\n          id=\"about\"\n          onClick={this.props.handleChangeTab}\n          className={this.props.activeId === 'about' ? 'active' : ''}\n        >\n          About\n        </button>\n        <button\n          id=\"contact\"\n          onClick={this.props.handleChangeTab}\n          className={this.props.activeId === 'contact' ? 'active' : ''}\n        >\n          Contact\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default TabSelector;\n","import React, { Component } from 'react';\nimport TabSelector from './TabSelector';\nimport './App.css';\n\nconst Home = () => <p>This is the Home component!</p>;\nconst About = () => <p>This challenge is about tabs!</p>;\nconst Contact = () => <p>Feel free to contact us!</p>;\nconst Error = () => <p>Something went <strong>wrong</strong>!</p>;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeId: 'home'\n    };\n    this.handleChangeTab = this.handleChangeTab.bind(this)\n  }\n  \n  getTabContent() {\n    switch(this.state.activeId) {\n      case 'home':\n        return <Home />;\n      case 'about':\n        return <About />\n      case 'contact':\n        return <Contact />        \n      default:\n        return <Error />;\n    }\n  }\n\n  handleChangeTab(event) {\n    const buttonId = event.target.id;\n    this.setState({ activeId: buttonId });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <TabSelector activeId={this.state.activeId} handleChangeTab={this.handleChangeTab} />\n        <div className=\"App-content\">\n          {\n            this.getTabContent()\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}